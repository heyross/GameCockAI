from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
import pandas as pd

DATABASE_URL = "sqlite:///./gamecock.db"

engine = create_engine(DATABASE_URL, connect_args={"check_same_thread": False})
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()

from sqlalchemy import Column, Integer, String, DateTime, Float

class CFTCSwap(Base):
    __tablename__ = 'cftc_swap_data'

    id = Column(Integer, primary_key=True, index=True)
    dissemination_id = Column(String, index=True)
    original_dissemination_id = Column(String)
    action_type = Column(String)
    event_type = Column(String)
    event_timestamp = Column(DateTime)
    amendment_indicator = Column(String)
    asset_class = Column(String)
    product_name = Column(String)
    cleared = Column(String)
    mandatory_clearing_indicator = Column(String)
    execution_timestamp = Column(DateTime)
    effective_date = Column(DateTime)
    expiration_date = Column(DateTime)
    maturity_date_of_the_underlier = Column(DateTime)
    non_standardized_term_indicator = Column(String)
    platform_identifier = Column(String)
    prime_brokerage_transaction_indicator = Column(String)
    block_trade_election_indicator = Column(String)
    large_notional_off_facility_swap_election_indicator = Column(String)
    notional_amount_leg_1 = Column(Float)
    notional_amount_leg_2 = Column(Float)
    notional_currency_leg_1 = Column(String)
    notional_currency_leg_2 = Column(String)
    notional_quantity_leg_1 = Column(Float)
    notional_quantity_leg_2 = Column(Float)
    total_notional_quantity_leg_1 = Column(Float)
    total_notional_quantity_leg_2 = Column(Float)
    quantity_frequency_multiplier_leg_1 = Column(Float)
    quantity_frequency_multiplier_leg_2 = Column(Float)
    quantity_unit_of_measure_leg_1 = Column(String)
    quantity_unit_of_measure_leg_2 = Column(String)
    quantity_frequency_leg_1 = Column(String)
    quantity_frequency_leg_2 = Column(String)
    notional_amount_in_effect_on_associated_effective_date_leg_1 = Column(Float)
    notional_amount_in_effect_on_associated_effective_date_leg_2 = Column(Float)
    effective_date_of_the_notional_amount_leg_1 = Column(DateTime)
    effective_date_of_the_notional_amount_leg_2 = Column(DateTime)
    end_date_of_the_notional_amount_leg_1 = Column(DateTime)
    end_date_of_the_notional_amount_leg_2 = Column(DateTime)
    call_amount_leg_1 = Column(Float)
    call_amount_leg_2 = Column(Float)
    call_currency_leg_1 = Column(String)
    call_currency_leg_2 = Column(String)
    put_amount_leg_1 = Column(Float)
    put_amount_leg_2 = Column(Float)
    put_currency_leg_1 = Column(String)
    put_currency_leg_2 = Column(String)
    exchange_rate = Column(Float)
    exchange_rate_basis = Column(String)
    first_exercise_date = Column(DateTime)
    fixed_rate_leg_1 = Column(Float)
    fixed_rate_leg_2 = Column(Float)
    option_premium_amount = Column(Float)
    option_premium_currency = Column(String)
    price = Column(Float)
    price_unit_of_measure = Column(String)
    spread_leg_1 = Column(Float)
    spread_leg_2 = Column(Float)
    spread_currency_leg_1 = Column(String)
    spread_currency_leg_2 = Column(String)
    strike_price = Column(Float)
    strike_price_currency_currency_pair = Column(String)
    post_priced_swap_indicator = Column(String)
    price_currency = Column(String)
    price_notation = Column(String)
    spread_notation_leg_1 = Column(String)
    spread_notation_leg_2 = Column(String)
    strike_price_notation = Column(String)
    fixed_rate_day_count_convention_leg_1 = Column(String)
    fixed_rate_day_count_convention_leg_2 = Column(String)
    floating_rate_day_count_convention_leg_1 = Column(String)
    floating_rate_day_count_convention_leg_2 = Column(String)
    floating_rate_reset_frequency_period_leg_1 = Column(String)
    floating_rate_reset_frequency_period_leg_2 = Column(String)
    floating_rate_reset_frequency_period_multiplier_leg_1 = Column(Float)
    floating_rate_reset_frequency_period_multiplier_leg_2 = Column(Float)
    other_payment_amount = Column(Float)
    fixed_rate_payment_frequency_period_leg_1 = Column(String)
    floating_rate_payment_frequency_period_leg_1 = Column(String)
    fixed_rate_payment_frequency_period_leg_2 = Column(String)
    floating_rate_payment_frequency_period_leg_2 = Column(String)
    fixed_rate_payment_frequency_period_multiplier_leg_1 = Column(Float)
    floating_rate_payment_frequency_period_multiplier_leg_1 = Column(Float)
    fixed_rate_payment_frequency_period_multiplier_leg_2 = Column(Float)
    floating_rate_payment_frequency_period_multiplier_leg_2 = Column(Float)
    other_payment_type = Column(String)
    other_payment_currency = Column(String)
    settlement_currency_leg_1 = Column(String)
    settlement_currency_leg_2 = Column(String)
    settlement_location_leg_1 = Column(String)
    settlement_location_leg_2 = Column(String)
    collateralisation_category = Column(String)
    custom_basket_indicator = Column(String)
    index_factor = Column(Float)
    underlier_id_leg_1 = Column(String)
    underlier_id_leg_2 = Column(String)
    underlier_id_source_leg_1 = Column(String)
    underlying_asset_name = Column(String)
    underlying_asset_subtype_or_underlying_contract_subtype_leg_1 = Column(String)
    underlying_asset_subtype_or_underlying_contract_subtype_leg_2 = Column(String)
    embedded_option_type = Column(String)
    option_type = Column(String)
    option_style = Column(String)
    package_indicator = Column(String)
    package_transaction_price = Column(Float)
    package_transaction_price_currency = Column(String)
    package_transaction_price_notation = Column(String)
    package_transaction_spread = Column(Float)
    package_transaction_spread_currency = Column(String)
    package_transaction_spread_notation = Column(String)
    physical_delivery_location_leg_1 = Column(String)
    delivery_type = Column(String)

def create_db_and_tables():
    Base.metadata.create_all(bind=engine)

def get_db_stats():
    """Returns statistics about the database."""
    db = SessionLocal()
    try:
        cftc_count = db.query(CFTCSwap).count()
        # Add counts for other tables as they are created
        return {"cftc_swap_data": cftc_count}
    finally:
        db.close()

def export_db_to_csv(output_path):
    """Exports the CFTC Swap data to a CSV file."""
    db = SessionLocal()
    try:
        query = db.query(CFTCSwap)
        df = pd.read_sql(query.statement, db.bind)
        df.to_csv(output_path, index=False)
        print(f"Database exported to {output_path}")
    finally:
        db.close()

def reset_database():
    """Drops all tables and recreates them."""
    Base.metadata.drop_all(bind=engine)
    Base.metadata.create_all(bind=engine)
    print("Database has been reset.")
